@using AllYourPlates.WebMVC.DataAccess
@inject IConfiguration Configuration
@using System.Runtime.InteropServices
@using System.Text.Json

@{
    //TODO create a logo
    ViewData["Title"] = "Home Page";


    // Get current version from environment variable or fallback
    string currentVersion = Configuration["APP_VERSION"] ?? "unknown";

    // Detect if running inside Docker
    bool isRunningInDocker = Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") == "true";

}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>

    <!-- Container for the list of messages -->
    <ul id="messageList"></ul> <!-- List to hold messages -->



    <div class="mt-3">
        <p><strong>Current Version:</strong> <span id="currentVersion">@currentVersion</span></p>
        <p><strong>Running Inside Docker:</strong> @(isRunningInDocker ? "Yes" : "No")</p>

        <div id="update-notice" class="alert alert-warning" style="display: none;">
            A new version (<span id="latestVersion"></span>) is available! Please update.
        </div>
    </div>


</div>

@section Scripts {
    <script type="text/javascript">


        async function checkForUpdates() {
            const currentVersion = document.getElementById("currentVersion").innerText.trim();
            const githubApiUrl = "https://api.github.com/repos/pavelgutin/allyourplates/releases/latest";

            try {
                const response = await fetch(githubApiUrl, {
                    headers: { "Accept": "application/vnd.github.v3+json" }
                });
                const data = await response.json();
                const latestVersion = data.tag_name;

                if (latestVersion && latestVersion !== currentVersion) {
                    document.getElementById("latestVersion").innerText = latestVersion;
                    document.getElementById("update-notice").style.display = "block";
                }
            } catch (error) {
                console.error("Error checking for updates:", error);
            }
        }

        checkForUpdates();


        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub") // URL to your SignalR hub
            .build();

        connection.on("ReceiveMessage", function (message) {
            const li = document.createElement("li");
            li.textContent = message;
            const messageList = document.getElementById("messageList");
            messageList.appendChild(li);
        });

        connection.start().catch(function (err) {
            console.error("Error while starting connection: " + err);
        });
    </script>
}